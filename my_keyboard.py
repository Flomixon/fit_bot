from datetime import datetime

from aiogram import types
from aiogram.filters.callback_data import CallbackData

from beanie import PydanticObjectId

from db import coll_exc, coll_train


class ExcercisesCallback(CallbackData, prefix="my_excercises"):
    obj: PydanticObjectId
    exc_name: str


class ExcersisesInfoCallback(ExcercisesCallback, prefix="change_info"):
    pass


class ExcersisesSetsCallback(ExcercisesCallback, prefix="input_set"):
    pass


class MuscleGroupCallback(CallbackData, prefix="muscle_group"):
    obj: PydanticObjectId


class ExcercisesAddCallback(CallbackData, prefix="add_excercises"):
    obj: PydanticObjectId


class TrainingCallback(CallbackData, prefix="training"):
    obj: PydanticObjectId


class ExcHistoryCallback(ExcercisesCallback, prefix="history_exc"):
    pass


def start_kb() -> types.InlineKeyboardMarkup:
    button = [[types.InlineKeyboardButton(
        text='–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
        callback_data="TrainStart"),
        types.InlineKeyboardButton(
            text='–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
            callback_data="TrainHistory"
        )]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=button)
    return keyboard


def cancel_kb() -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(
            text='–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è',
            callback_data="CancelAddExcercises"
        )]]
    )
    return keyboard


def cancel_ex_kb() -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(
            text='–ó–∞–≤–µ—Ä—à–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ',
            callback_data="CancelExcercises"
        )]]
    )
    return keyboard


async def excercises_kb(
    callback_data: PydanticObjectId
) -> types.InlineKeyboardMarkup:
    button = []
    exc = await coll_exc.find_one({"_id": callback_data})
    if exc.get("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"):
        for res in exc["–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"].keys():
            button += [[types.InlineKeyboardButton(
                text=f"üí™ {res}",
                callback_data=ExcercisesCallback(
                    obj=callback_data,
                    exc_name=res).pack()
            )]]
    button += [[types.InlineKeyboardButton(
        text='‚úÖ –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ',
        callback_data=ExcercisesAddCallback(
            obj=callback_data).pack()
        )],
        [types.InlineKeyboardButton(
            text='üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
            callback_data="EndTraining"
        )]
        ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=button)
    return keyboard


async def muscle_group_kb() -> types.InlineKeyboardMarkup:
    button = []
    async for res in coll_exc.find().sort("–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü"):
        button += [[types.InlineKeyboardButton(
            text=f"üí™ {res['–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü']}",
            callback_data=MuscleGroupCallback(
                obj=res['_id']).pack()
        )]]
    button += [[types.InlineKeyboardButton(
            text='üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
            callback_data="EndTraining"
        )]
        ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=button)
    return keyboard


async def history_kb() -> types.InlineKeyboardMarkup:
    cursor = coll_train.find()
    button = []
    for res in await cursor.to_list(5):
        button += [[types.InlineKeyboardButton(
            text=f'''–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {
                datetime.strptime(res["–¥–∞—Ç–∞"], "%Y-%m-%d").strftime("%d %B %y")
                }''',
            callback_data=TrainingCallback(
                obj=res['_id']).pack()
        )]]
    button += [[types.InlineKeyboardButton(
            text='–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é',
            callback_data="InputDate"
        )],
            [types.InlineKeyboardButton(
                text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="MainMenu"
            )]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=button)
    return keyboard


async def exc_history_kb(obj: PydanticObjectId) -> types.InlineKeyboardMarkup:
    button = []
    res = await coll_train.find_one({"_id": obj})
    if res.get("—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"):
        for exc in res["—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"]:
            button += [[types.InlineKeyboardButton(
                text=f"üí™ {exc}",
                callback_data=ExcHistoryCallback(
                    obj=obj,
                    exc_name=exc).pack()
            )]]
    button += [[types.InlineKeyboardButton(
        text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',
        callback_data="TrainHistory"
        )]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=button)
    return keyboard


def back_history_kb(obj: PydanticObjectId) -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(
            text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
            callback_data=TrainingCallback(
                obj=obj).pack()
        )],
            [types.InlineKeyboardButton(
                text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="MainMenu"
            )]
        ])
    return keyboard


def cancel_input_kb() -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(
            text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            callback_data="CancelInputDate"
        )]]
    )
    return keyboard


def choice_info(
    obj: PydanticObjectId, name: str
) -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(
            text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
            callback_data=ExcersisesInfoCallback(
                obj=obj, exc_name=name).pack()
        )],
            [types.InlineKeyboardButton(
                text="–í–Ω–µ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è",
                callback_data=ExcersisesSetsCallback(
                    obj=obj, exc_name=name).pack()
            )]])
    return keyboard


def cancel_info() -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(
            text='–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
            callback_data="CancelInfo"
        )]]
    )
    return keyboard
